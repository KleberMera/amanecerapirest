// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
   provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  //directUrl = env("DATABASE_URL_UNPOOLED")
}

model Rol {
  id          Int       @id @default(autoincrement())
  nombre      String
  descripcion String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  usuarios    Usuario[]
}

model Usuario {
  id                 Int                      @id @default(autoincrement())
  rolId              Int
  rol                Rol                      @relation(fields: [rolId], references: [id])
  cedula             String?                  @unique
  nombre             String?
  apellido           String?
  nombreComercial    String?                  @unique
  username           String?                  @unique
  email              String?                  @unique
  password           String?
  telefono           String?
  firebaseUid        String?                  @unique
  estado             Boolean                  @default(true)
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  accionesAcumuladas AccionAcumulada[]
  accionesCompradas  AccionComprada[]
  resumenAcciones    ResumenAccionesUsuario[]
}

model AccionAcumulada {
  id             Int      @id @default(autoincrement())
  usuarioId      Int
  usuario        Usuario  @relation(fields: [usuarioId], references: [id])
  totalAcumulado Int
  mesAcumulado   String
  fechaAcumulado DateTime
  estado         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model AccionComprada {
  id               Int             @id @default(autoincrement())
  usuarioId        Int
  usuario          Usuario         @relation(fields: [usuarioId], references: [id])
  cantidad         Int
  fechaCompra      DateTime
  mesCompra        String
  estado           Boolean         @default(true)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  interesesGanados InteresGanado[]
}

model InteresGanado {
  id               Int            @id @default(autoincrement())
  accionCompradaId Int
  accionComprada   AccionComprada @relation(fields: [accionCompradaId], references: [id])
  interesGenerado  Decimal
  estado           Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model ResumenAccionesUsuario {
  id                 Int      @id @default(autoincrement())
  usuarioId          Int
  usuario            Usuario  @relation(fields: [usuarioId], references: [id])
  totalAcumulado     Int
  totalComprado      Int
  totalInteresGanado Decimal
  fechaResumen       DateTime
  estado             Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
